name: Continuous Integration
on: [push]                      # Will make the workflow run every time you push to any branch

jobs:
  build_and_test_cSharp:
    name: Build and test c#
    runs-on: ubuntu-latest      # Sets the build environment a machine with the latest Ubuntu installed
    steps:
    - uses: actions/checkout@v2 # Adds a step to checkout the repository code
    - name: Build C# code
      run: dotnet build
    - name: Run C# tests
      run: dotnet test


  build_and_test_ts:
    name: Build and test ts
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./DotnetTemplate.Web      # Sets the build environment a machine with the latest Ubuntu installed
    steps:
    - uses: actions/checkout@v2
    - name: Install npm requirements
      run: npm install
    - name: Build typescript code
      run: npm run build
    - name: Run linter on ts code
      run: npm run lint
    - name: Run ts tests
      run: npm t

  publish_to_docker_hub:
    if: always()
    needs:
      - build_and_test_cSharp
      - build_and_test_ts
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: karrot96/dotnettemplate:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy_via_heroku:
    if: always()
    needs:
      - build_and_test_cSharp
      - build_and_test_ts
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Login to Heroku Container registry
      env: 
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:login 
    - name: Build and push
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:push -a cryptic-wave-06593 web 
    - name: Release
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku container:release -a cryptic-wave-06593 web 